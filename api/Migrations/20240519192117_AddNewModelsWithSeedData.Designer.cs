// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240519192117_AddNewModelsWithSeedData")]
    partial class AddNewModelsWithSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.BrindeModel", b =>
                {
                    b.Property<int>("IdBrinde")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBrinde"));

                    b.Property<string>("Cadastro")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("DescricaoBrinde")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeBrinde")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int>("Saldo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Validade")
                        .HasColumnType("datetime2");

                    b.Property<int>("ValorEcopoints")
                        .HasColumnType("int");

                    b.HasKey("IdBrinde");

                    b.ToTable("TB_BRINDE");

                    b.HasData(
                        new
                        {
                            IdBrinde = 1,
                            Cadastro = "S",
                            DescricaoBrinde = "Caneca Ecológica",
                            NomeBrinde = "Caneca",
                            Quantidade = 100,
                            Saldo = 100,
                            Validade = new DateTime(2025, 5, 19, 16, 21, 16, 837, DateTimeKind.Local).AddTicks(3051),
                            ValorEcopoints = 150
                        },
                        new
                        {
                            IdBrinde = 2,
                            Cadastro = "S",
                            DescricaoBrinde = "Camiseta Reciclada",
                            NomeBrinde = "Camiseta",
                            Quantidade = 50,
                            Saldo = 50,
                            Validade = new DateTime(2025, 5, 19, 16, 21, 16, 837, DateTimeKind.Local).AddTicks(3061),
                            ValorEcopoints = 200
                        });
                });

            modelBuilder.Entity("api.Models.ColetaModel", b =>
                {
                    b.Property<int>("IdColeta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdColeta"));

                    b.Property<int>("CodigoEcoponto")
                        .HasColumnType("int");

                    b.Property<int>("CodigoUtilizador")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataColeta")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEcoponto")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<string>("SituacaoColeta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalEcopoints")
                        .HasColumnType("real");

                    b.HasKey("IdColeta");

                    b.ToTable("TB_COLETA");

                    b.HasData(
                        new
                        {
                            IdColeta = 1,
                            CodigoEcoponto = 1001,
                            CodigoUtilizador = 2001,
                            DataColeta = new DateTime(2024, 5, 19, 16, 21, 16, 837, DateTimeKind.Local).AddTicks(2989),
                            IdEcoponto = 1,
                            IdUtilizador = 1,
                            Peso = 15.5,
                            SituacaoColeta = "Completa",
                            TotalEcopoints = 50f
                        },
                        new
                        {
                            IdColeta = 2,
                            CodigoEcoponto = 1002,
                            CodigoUtilizador = 2002,
                            DataColeta = new DateTime(2024, 5, 19, 16, 21, 16, 837, DateTimeKind.Local).AddTicks(3006),
                            IdEcoponto = 2,
                            IdUtilizador = 2,
                            Peso = 20.0,
                            SituacaoColeta = "Pendente",
                            TotalEcopoints = 75f
                        });
                });

            modelBuilder.Entity("api.Models.EcopointsModel", b =>
                {
                    b.Property<int>("IdMaterial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMaterial"));

                    b.Property<int>("EcoPointsTotais")
                        .HasColumnType("int");

                    b.Property<string>("OrdemGrandeza")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("IdMaterial");

                    b.ToTable("TB_ECOPOINTS");

                    b.HasData(
                        new
                        {
                            IdMaterial = 1,
                            EcoPointsTotais = 100,
                            OrdemGrandeza = "A",
                            Quantidade = 10
                        },
                        new
                        {
                            IdMaterial = 2,
                            EcoPointsTotais = 200,
                            OrdemGrandeza = "B",
                            Quantidade = 20
                        });
                });

            modelBuilder.Entity("api.Models.EcopontoModel", b =>
                {
                    b.Property<int>("IdEcoponto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEcoponto"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CEP")
                        .HasColumnType("int");

                    b.Property<int>("CNPJ")
                        .HasColumnType("int");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Latitude")
                        .HasColumnType("int");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Longitude")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEcoponto");

                    b.ToTable("TB_ECOPONTO");

                    b.HasData(
                        new
                        {
                            IdEcoponto = 1,
                            Bairro = "sla4",
                            CEP = 3081010,
                            CNPJ = 12345678,
                            Cidade = "sla5",
                            Complemento = "sla3",
                            Email = "ecoponto1@example.com",
                            Endereco = "sla2",
                            Latitude = 192,
                            Logradouro = "sla",
                            Longitude = 193,
                            Nome = "Ecoponto1",
                            PasswordHash = new byte[] { 250, 87, 23, 103, 224, 42, 127, 2, 17, 234, 86, 171, 154, 37, 182, 19, 217, 63, 113, 36, 179, 153, 81, 186, 108, 96, 37, 103, 152, 218, 240, 133, 50, 175, 103, 37, 85, 64, 53, 215, 182, 155, 77, 213, 22, 19, 207, 236, 169, 99, 75, 103, 28, 1, 28, 38, 122, 30, 174, 9, 115, 22, 97, 89 },
                            PasswordSalt = new byte[] { 74, 191, 138, 25, 203, 74, 81, 109, 240, 141, 34, 179, 53, 11, 55, 107, 202, 186, 190, 232, 110, 0, 210, 56, 252, 51, 24, 25, 33, 158, 126, 234, 30, 45, 191, 141, 121, 31, 253, 167, 216, 165, 9, 65, 64, 213, 8, 98, 35, 159, 147, 71, 29, 89, 122, 9, 36, 183, 106, 137, 93, 22, 182, 113, 129, 247, 250, 149, 159, 83, 107, 100, 178, 193, 152, 52, 190, 120, 221, 232, 246, 73, 101, 66, 182, 32, 45, 135, 42, 154, 238, 212, 255, 145, 136, 109, 95, 195, 30, 168, 47, 141, 126, 205, 164, 243, 116, 48, 190, 207, 6, 128, 43, 33, 35, 223, 186, 180, 40, 251, 225, 160, 24, 66, 186, 105, 110, 192 },
                            RazaoSocial = "Paz Mundial",
                            UF = "sl",
                            Username = "Ecoponto1"
                        },
                        new
                        {
                            IdEcoponto = 2,
                            Bairro = "sla4",
                            CEP = 3081010,
                            CNPJ = 12345678,
                            Cidade = "sla5",
                            Complemento = "sla3",
                            Email = "ecoponto2@example.com",
                            Endereco = "sla2",
                            Latitude = 192,
                            Logradouro = "sla",
                            Longitude = 193,
                            Nome = "Ecoponto2",
                            PasswordHash = new byte[] { 250, 87, 23, 103, 224, 42, 127, 2, 17, 234, 86, 171, 154, 37, 182, 19, 217, 63, 113, 36, 179, 153, 81, 186, 108, 96, 37, 103, 152, 218, 240, 133, 50, 175, 103, 37, 85, 64, 53, 215, 182, 155, 77, 213, 22, 19, 207, 236, 169, 99, 75, 103, 28, 1, 28, 38, 122, 30, 174, 9, 115, 22, 97, 89 },
                            PasswordSalt = new byte[] { 74, 191, 138, 25, 203, 74, 81, 109, 240, 141, 34, 179, 53, 11, 55, 107, 202, 186, 190, 232, 110, 0, 210, 56, 252, 51, 24, 25, 33, 158, 126, 234, 30, 45, 191, 141, 121, 31, 253, 167, 216, 165, 9, 65, 64, 213, 8, 98, 35, 159, 147, 71, 29, 89, 122, 9, 36, 183, 106, 137, 93, 22, 182, 113, 129, 247, 250, 149, 159, 83, 107, 100, 178, 193, 152, 52, 190, 120, 221, 232, 246, 73, 101, 66, 182, 32, 45, 135, 42, 154, 238, 212, 255, 145, 136, 109, 95, 195, 30, 168, 47, 141, 126, 205, 164, 243, 116, 48, 190, 207, 6, 128, 43, 33, 35, 223, 186, 180, 40, 251, 225, 160, 24, 66, 186, 105, 110, 192 },
                            RazaoSocial = "Paz Mundial",
                            UF = "sl",
                            Username = "Ecoponto2"
                        });
                });

            modelBuilder.Entity("api.Models.MateriaisModel", b =>
                {
                    b.Property<int>("IdMaterial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMaterial"));

                    b.Property<int>("Classe")
                        .HasColumnType("int");

                    b.Property<string>("DescricaoMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMaterial");

                    b.ToTable("TB_MATERIAIS");
                });

            modelBuilder.Entity("api.Models.UtilizadorModel", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUtilizador"));

                    b.Property<DateTime?>("DataAcesso")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("SituacaoEmail")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUtilizador");

                    b.ToTable("TB_UTILIZADOR");

                    b.HasData(
                        new
                        {
                            IdUtilizador = 1,
                            Email = "joao123@gmail.com",
                            Nome = "João",
                            PasswordHash = new byte[] { 250, 87, 23, 103, 224, 42, 127, 2, 17, 234, 86, 171, 154, 37, 182, 19, 217, 63, 113, 36, 179, 153, 81, 186, 108, 96, 37, 103, 152, 218, 240, 133, 50, 175, 103, 37, 85, 64, 53, 215, 182, 155, 77, 213, 22, 19, 207, 236, 169, 99, 75, 103, 28, 1, 28, 38, 122, 30, 174, 9, 115, 22, 97, 89 },
                            PasswordSalt = new byte[] { 74, 191, 138, 25, 203, 74, 81, 109, 240, 141, 34, 179, 53, 11, 55, 107, 202, 186, 190, 232, 110, 0, 210, 56, 252, 51, 24, 25, 33, 158, 126, 234, 30, 45, 191, 141, 121, 31, 253, 167, 216, 165, 9, 65, 64, 213, 8, 98, 35, 159, 147, 71, 29, 89, 122, 9, 36, 183, 106, 137, 93, 22, 182, 113, 129, 247, 250, 149, 159, 83, 107, 100, 178, 193, 152, 52, 190, 120, 221, 232, 246, 73, 101, 66, 182, 32, 45, 135, 42, 154, 238, 212, 255, 145, 136, 109, 95, 195, 30, 168, 47, 141, 126, 205, 164, 243, 116, 48, 190, 207, 6, 128, 43, 33, 35, 223, 186, 180, 40, 251, 225, 160, 24, 66, 186, 105, 110, 192 },
                            SituacaoEmail = true,
                            Username = "UsuarioJoao"
                        },
                        new
                        {
                            IdUtilizador = 2,
                            Email = "maria123@gmail.com",
                            Nome = "Maria",
                            PasswordHash = new byte[] { 250, 87, 23, 103, 224, 42, 127, 2, 17, 234, 86, 171, 154, 37, 182, 19, 217, 63, 113, 36, 179, 153, 81, 186, 108, 96, 37, 103, 152, 218, 240, 133, 50, 175, 103, 37, 85, 64, 53, 215, 182, 155, 77, 213, 22, 19, 207, 236, 169, 99, 75, 103, 28, 1, 28, 38, 122, 30, 174, 9, 115, 22, 97, 89 },
                            PasswordSalt = new byte[] { 74, 191, 138, 25, 203, 74, 81, 109, 240, 141, 34, 179, 53, 11, 55, 107, 202, 186, 190, 232, 110, 0, 210, 56, 252, 51, 24, 25, 33, 158, 126, 234, 30, 45, 191, 141, 121, 31, 253, 167, 216, 165, 9, 65, 64, 213, 8, 98, 35, 159, 147, 71, 29, 89, 122, 9, 36, 183, 106, 137, 93, 22, 182, 113, 129, 247, 250, 149, 159, 83, 107, 100, 178, 193, 152, 52, 190, 120, 221, 232, 246, 73, 101, 66, 182, 32, 45, 135, 42, 154, 238, 212, 255, 145, 136, 109, 95, 195, 30, 168, 47, 141, 126, 205, 164, 243, 116, 48, 190, 207, 6, 128, 43, 33, 35, 223, 186, 180, 40, 251, 225, 160, 24, 66, 186, 105, 110, 192 },
                            SituacaoEmail = true,
                            Username = "UsuarioMaria"
                        },
                        new
                        {
                            IdUtilizador = 3,
                            DataAcesso = new DateTime(2024, 5, 19, 16, 21, 16, 837, DateTimeKind.Local).AddTicks(3072),
                            Email = "admin@example.com",
                            Nome = "Admin",
                            PasswordHash = new byte[] { 250, 87, 23, 103, 224, 42, 127, 2, 17, 234, 86, 171, 154, 37, 182, 19, 217, 63, 113, 36, 179, 153, 81, 186, 108, 96, 37, 103, 152, 218, 240, 133, 50, 175, 103, 37, 85, 64, 53, 215, 182, 155, 77, 213, 22, 19, 207, 236, 169, 99, 75, 103, 28, 1, 28, 38, 122, 30, 174, 9, 115, 22, 97, 89 },
                            PasswordSalt = new byte[] { 74, 191, 138, 25, 203, 74, 81, 109, 240, 141, 34, 179, 53, 11, 55, 107, 202, 186, 190, 232, 110, 0, 210, 56, 252, 51, 24, 25, 33, 158, 126, 234, 30, 45, 191, 141, 121, 31, 253, 167, 216, 165, 9, 65, 64, 213, 8, 98, 35, 159, 147, 71, 29, 89, 122, 9, 36, 183, 106, 137, 93, 22, 182, 113, 129, 247, 250, 149, 159, 83, 107, 100, 178, 193, 152, 52, 190, 120, 221, 232, 246, 73, 101, 66, 182, 32, 45, 135, 42, 154, 238, 212, 255, 145, 136, 109, 95, 195, 30, 168, 47, 141, 126, 205, 164, 243, 116, 48, 190, 207, 6, 128, 43, 33, 35, 223, 186, 180, 40, 251, 225, 160, 24, 66, 186, 105, 110, 192 },
                            SituacaoEmail = true,
                            Username = "Admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
